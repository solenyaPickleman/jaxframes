[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "jaxframes"
version = "0.1.0"
description = "Pandas-Compatible DataFrames for TPUs using JAX"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "JaxFrames Team"},
]
keywords = ["jax", "pandas", "dataframe", "tpu", "distributed"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    "jax",
    "jaxlib",
    "numpy",
    "pandas",
]

[project.optional-dependencies]
tpu = [
    "jax[tpu]",
]
test = [
    "pytest",
    "pytest-benchmark",
    "pytest-xdist",
    "hypothesis",
    "pandera",
]
dev = [
    "black",
    "isort",
    "mypy",
    "ruff",
]
benchmark = [
    "pytest-benchmark",
    "matplotlib",
    "seaborn",
    "memory-profiler",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser",
]

[project.urls]
Homepage = "https://github.com/jaxframes/jaxframes"
Documentation = "https://jaxframes.readthedocs.io"
Repository = "https://github.com/jaxframes/jaxframes"
"Bug Tracker" = "https://github.com/jaxframes/jaxframes/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/jaxframes"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "tpu: marks tests that require TPU hardware",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["jaxframes"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "jax.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]